import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from './../app/store';
import { loginUserAPI } from './loginAPI';

export interface LoginState {
  status: 'idle' | 'loading' | 'failed';
  logged:boolean;
  admin:boolean;
}

const initialState: LoginState = {
    status: 'idle',
    logged: false,
    admin: false
};

export const loginAsync = createAsyncThunk(
  'Login/loginUserAPI',
  async (credentials:any ) => {
    const response = await loginUserAPI(credentials.username,credentials.password  );
    return response
  }
);

export const LoginSlice = createSlice({
  name: 'login',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
    },
    decrement: (state) => {
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loginAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(loginAsync.fulfilled, (state, action) => {
        console.log(action.payload);
        localStorage.setItem("token",action.payload.access)
        state.logged=true
        state.status = 'idle';
      })
      .addCase(loginAsync.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export const { increment, decrement, incrementByAmount } = LoginSlice.actions;
export const selectLogged = (state: RootState) => state.login.logged;
export default LoginSlice.reducer;